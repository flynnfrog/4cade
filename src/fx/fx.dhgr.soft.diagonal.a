;license:MIT
;(c) 2019-2020 by 4am
;
!cpu 6502
!to "build/FX/DHGR.SOFT.DIAG",plain
*=$6000

y = $6D
col = $6E
counter = $6F
zphgrrowlo = $70
zphgrrowhi = $88
zpcopymasks1 = $A0
zpcopymasks2 = $A8
zpcopymasks3 = $B0
zpcopymasks4 = $B8
zpcopymasks5 = $C0
zpcopymasks6 = $C8
zpcopymasks1_aux = $D0
zpcopymasks2_aux = $D8
zpcopymasks3_aux = $E0
zpcopymasks4_aux = $E8
zpcopymasks5_aux = $F0
zpcopymasks6_aux = $F8

!macro RESET_HGR_CALC_BY_7 {
         lda   zphgrrowhi, x
         sta   $27
         eor   #$60
         sta   $3d
}

; .copymask must be in zero page and must be the exact address
; (it is not indexed by X)
!macro COPY_BIT_BY .src1, .dest1, .copymask {
         lda   <.copymask
         beq   +
         lda   (.src1),y
         eor   (.dest1),y            ; merge source and destination bits
         and   <.copymask            ; isolate the bits to replace, zero the rest
         eor   (.dest1),y            ; unmerge source and destination bits, leaves 'to keep' destination bits intact
         sta   (.dest1),y            ; write the result
+
}

         !source "src/fx/macros.a"
         !source "src/fx/fx.dhgr.common.a"

         +COPY_SELF_TO_AUXMEM

         ldx   #$90
-        lda   hgrrowlo-1, x
         sta   zphgrrowlo-1, x
         dex
         bne   -

         lda   #(40+24+7-1) ; columns + rows + blocks per row - 1
         sta   counter

         lda   #39
         sta   col
ColLoop
         ldx   #23
         ldy   col
         sty   y
RowLoop
         lda   zphgrrowlo, x
         sta   $26
         sta   $3c
         lda   zphgrrowhi, x
         sta   $27
         eor   #$60
         sta   $3d

         ldy   y
         +BRANCH_IF_Y_IS_OFFSCREEN @block2

!for i, 0, 7 {
         +COPY_BIT_BY $3c, $26, zpcopymasks1+i
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@block2
         iny
         +BRANCH_IF_Y_IS_OFFSCREEN @block3

!for i, 0, 7 {
         +COPY_BIT_BY $3c, $26, zpcopymasks2+i
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@block3
         iny
         +BRANCH_IF_Y_IS_OFFSCREEN @block4

!for i, 0, 7 {
         +COPY_BIT_BY $3c, $26, zpcopymasks3+i
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@block4
         iny
         +BRANCH_IF_Y_IS_OFFSCREEN @block5

!for i, 0, 7 {
         +COPY_BIT_BY $3c, $26, zpcopymasks4+i
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@block5
         iny
         +BRANCH_IF_Y_IS_OFFSCREEN @block6

!for i, 0, 7 {
         +COPY_BIT_BY $3c, $26, zpcopymasks5+i
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@block6
         iny
         +BRANCH_IF_Y_IS_OFFSCREEN @block7

!for i, 0, 7 {
         +COPY_BIT_BY $3c, $26, zpcopymasks6+i
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@block7
         iny
         +BRANCH_IF_Y_IS_OFFSCREEN @nextrow

!for i, 0, 7 {
         lda   ($3c),y
         sta   ($26),y
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@nextrow
         sta   $C003
         sta   $C005

         ldy   y
         +BRANCH_IF_Y_IS_OFFSCREEN @block2_aux

!for i, 0, 7 {
         +COPY_BIT_BY $3c, $26, zpcopymasks1_aux+i
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@block2_aux
         iny
         +BRANCH_IF_Y_IS_OFFSCREEN @block3_aux

!for i, 0, 7 {
         +COPY_BIT_BY $3c, $26, zpcopymasks2_aux+i
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@block3_aux
         iny
         +BRANCH_IF_Y_IS_OFFSCREEN @block4_aux

!for i, 0, 7 {
         +COPY_BIT_BY $3c, $26, zpcopymasks3_aux+i
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@block4_aux
         iny
         +BRANCH_IF_Y_IS_OFFSCREEN @block5_aux

!for i, 0, 7 {
         +COPY_BIT_BY $3c, $26, zpcopymasks4_aux+i
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@block5_aux
         iny
         +BRANCH_IF_Y_IS_OFFSCREEN @block6_aux

!for i, 0, 7 {
         +COPY_BIT_BY $3c, $26, zpcopymasks5_aux+i
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@block6_aux
         iny
         +BRANCH_IF_Y_IS_OFFSCREEN @block7_aux

!for i, 0, 7 {
         +COPY_BIT_BY $3c, $26, zpcopymasks6_aux+i
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
         +RESET_HGR_CALC_BY_7
@block7_aux
         iny
         +BRANCH_IF_Y_IS_OFFSCREEN @nextrow_aux

!for i, 0, 7 {
         lda   ($3c),y
         sta   ($26),y
!if i < 7 {
         +HGR_INC_WITHIN_BLOCK
}
}
@nextrow_aux

         sta   $C002
         sta   $C004
         ldy   y
         iny
         sty   y
         dex
         +LBPL RowLoop
         lda   $c000
         bmi   @exit
         dec   col
         dec   counter
         +LBNE ColLoop
@exit    rts

hgrrowlo
         !byte $00,$80,$00,$80,$00,$80,$00,$80
         !byte $28,$A8,$28,$A8,$28,$A8,$28,$A8
         !byte $50,$D0,$50,$D0,$50,$D0,$50,$D0
hgrrowhi
         !byte $20,$20,$21,$21,$22,$22,$23,$23
         !byte $20,$20,$21,$21,$22,$22,$23,$23
         !byte $20,$20,$21,$21,$22,$22,$23,$23
;1GFEDCBA ->
;1GGFFEED (main) +
;1DCCBBAA (aux)
copymasks1
         !byte %00000000
         !byte %00000000
         !byte %00000000
         !byte %10000001
         !byte %10000001
         !byte %00000000
         !byte %00000000
         !byte %00000000
copymasks2
         !byte %00000000
         !byte %00000000
         !byte %10000110
         !byte %10000001
         !byte %10000001
         !byte %10010110
         !byte %00000000
         !byte %00000000
copymasks3
         !byte %00000000
         !byte %00000000
         !byte %10000111
         !byte %10000111
         !byte %10000111
         !byte %10000111
         !byte %10000000
         !byte %10000000
copymasks4
         !byte %00000000
         !byte %10011001
         !byte %10000001
         !byte %10011111
         !byte %10000111
         !byte %10000111
         !byte %10011001
         !byte %00000000
copymasks5
         !byte %00000000
         !byte %10011111
         !byte %10011111
         !byte %10011111
         !byte %10011111
         !byte %10011111
         !byte %10011111
         !byte %00000000
copymasks6
         !byte %11100110
         !byte %10011111
         !byte %11111111
         !byte %10011111
         !byte %11111111
         !byte %10011111
         !byte %10011111
         !byte %11100110
copymasks1_aux
         !byte %00000000
         !byte %00000000
         !byte %00000000
         !byte %11000000
         !byte %11000000
         !byte %00000000
         !byte %00000000
         !byte %00000000
copymasks2_aux
         !byte %00000000
         !byte %00000000
         !byte %10110000
         !byte %11000000
         !byte %11000000
         !byte %10110000
         !byte %00000000
         !byte %00000000
copymasks3_aux
         !byte %00000000
         !byte %00000000
         !byte %11110000
         !byte %11110000
         !byte %11110000
         !byte %11110000
         !byte %00000000
         !byte %00000000
copymasks4_aux
         !byte %00000000
         !byte %11001100
         !byte %11110000
         !byte %11111100
         !byte %11110000
         !byte %11110000
         !byte %11001100
         !byte %00000000
copymasks5_aux
         !byte %00000000
         !byte %11111100
         !byte %11111100
         !byte %11111100
         !byte %11111100
         !byte %11111100
         !byte %11111100
         !byte %00000000
copymasks6_aux
         !byte %10110011
         !byte %11111100
         !byte %11111111
         !byte %11111100
         !byte %11111111
         !byte %11111100
         !byte %11111100
         !byte %10110011
